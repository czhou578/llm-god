name: Build and Release

on:
  push:
    branches: [master, release-action]
    tags:
      - "v*.*.*" # Trigger on tags like v1.0.0 for releases
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest
    steps:
      # Step 1: Check out the repository code
      - uses: actions/checkout@v4 # Updated to v4 for better performance
        with:
          fetch-depth: 0 # Ensures tags are fetched for versioning

      # Step 2: Set up Node.js
      - uses: actions/setup-node@v4 # Updated to v4
        with:
          node-version: 18
          cache: "npm" # Cache npm dependencies for faster runs

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Prettier (Fix Formatting)
      - name: Prettier (Fix Formatting)
        run: npx prettier --write "**/*.{js,json,css,html,md}"

      # Step 5: Security audit
      - name: Security audit
        run: npm audit --production

      # Step 6: Build the Electron app for Windows using electron-forge
      - name: Build Electron app
        run: npm run make
        env:
          # Optional: If electron-forge needs GitHub token for publishing
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Upload the built artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: out/make/**/*.exe # Path to the .exe file created by electron-forge

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }} # Use the workflow run number as the tag
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload Setup.exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/squirrel.windows/x64/llm-god-setup.exe # Path to the Setup.exe file
          asset_name: llm-god-setup.exe
          asset_content_type: application/octet-stream

      # Step 7: Upload the .nupkg file to the release
      - name: Upload .nupkg File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/squirrel.windows/x64/*.nupkg # Path to the .nupkg file
          asset_name: llm-god.nupkg # Replace with your app's name
          asset_content_type: application/octet-stream
